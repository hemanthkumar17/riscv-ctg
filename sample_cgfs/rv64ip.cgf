# For Licence details look at https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg/-/blob/master/LICENSE.incore

add32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      add32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

radd32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      radd32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

uradd32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uradd32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kadd32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kadd32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukadd32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ukadd32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

sub32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sub32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

rsub32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsub32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0


ursub32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursub32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

ksub32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ksub32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

uksub32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      uksub32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

cras32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      cras32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

rcras32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcras32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

urcras32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcras32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kcras32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kcras32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukcras32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ukcras32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

crsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      crsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

rcrsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcrsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

urcrsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcrsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kcrsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kcrsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukcrsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ukcrsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

stas32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stas32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

rstas32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstas32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

urstas32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstas32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kstas32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kstas32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukstas32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ukstas32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

stsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

rstsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

urstsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kstsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kstsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukstsa32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      ukstsa32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

sra32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

srai32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

sra32.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra32.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

srai32.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai32.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

srl32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

srli32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_imm_val("imm_val", 5)': 0

srl32.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl32.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

srli32.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli32.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_imm_val("imm_val", 5)': 0

sll32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sll32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

slli32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      slli32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_imm_val("imm_val", 5)': 0
        
ksll32:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      ksll32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

kslli32:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      kslli32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

kslra32:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      kslra32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

kslra32.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      kslra32.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

smin32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smin32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

umin32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umin32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

smax32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smax32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

umax32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umax32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kabs32:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      kabs32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0

khmbb16:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      khmbb16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmbt16:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      khmbt16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmtt16:
    config: 
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode: 
      khmtt16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmbb16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmbb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmbt16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmbt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmtt16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmtt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmabb16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmabb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmabt16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmabt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmatt16:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kdmatt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

# alias of mulsr64
# smbb32:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       smbb32: 0
#     rs1:
#       <<: *all_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 32, signed=True)': 0
#         'simd_base_val("rs2", xlen, 32, signed=True)': 0
#         'simd_val_comb(xlen, 32, signed=True)': 0

smbt32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smbt32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

smtt32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smtt32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmabb32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmabb32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmabt32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmabt32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmatt32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmatt32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmda32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmda32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmxda32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmxda32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

# alias of kmar64
# kmada32:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#       - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
#     opcode:
#       kmada32: 0
#     rs1:
#       <<: *all_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 32, signed=True)': 0
#         'simd_base_val("rs2", xlen, 32, signed=True)': 0
#         'simd_val_comb(xlen, 32, signed=True)': 0

kmaxda32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmaxda32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmads32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmads32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmadrs32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmadrs32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmaxds32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmaxds32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmsda32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmsda32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmsxda32:
    config:
      - check ISA:=regex(.*I.*P.*)
      - check ISA:=regex(.*Zicsr.*); def pext_check_vxsat_ov=True
    opcode:
      kmsxda32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

smds32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smds32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

smdrs32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smdrs32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

smxds32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smxds32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

sraiw.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sraiw.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

# instructions overlapping with those in the B extension in RV64 configuration (Zbpbo)
# pkbb32:
#     config: 
#       - check ISA:=regex(.*I.*P.*)
#     opcode: 
#       pkbb32: 0
#     rs1: 
#       <<: *all_regs
#     rs2: 
#       <<: *all_regs
#     rd: 
#       <<: *all_regs
#     op_comb: 
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 32, signed=False)': 0
#         'simd_base_val("rs2", xlen, 32, signed=False)': 0
#         'simd_val_comb(xlen, 32, signed=False)': 0

pkbt32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pkbt32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

pktb32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pktb32: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

# instructions overlapping with those in the B extension in RV64 configuration (Zbpbo)
# pktt32:
#     config: 
#       - check ISA:=regex(.*I.*P.*)
#     opcode: 
#       pktt32: 0
#     rs1: 
#       <<: *all_regs
#     rs2: 
#       <<: *all_regs
#     rd: 
#       <<: *all_regs
#     op_comb: 
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 32, signed=False)': 0
#         'simd_base_val("rs2", xlen, 32, signed=False)': 0
#         'simd_val_comb(xlen, 32, signed=False)': 0

# instructions overlapping with those in the B extension in RV32 configuration (Zbpbo)
clz32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clz32: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0

pkbb16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pkbb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

pktt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pktt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0
