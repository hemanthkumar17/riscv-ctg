# For Licence details look at https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg/-/blob/master/LICENSE.incore

add16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      add16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

radd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      radd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

uradd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uradd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kadd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kadd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukadd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukadd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

sub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

rsub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0


ursub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

ksub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

uksub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

cras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      cras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

rcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

crsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      crsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

rcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

stas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

rstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

stsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

rstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

add8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      add8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

radd8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      radd8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

uradd8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uradd8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

kadd8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kadd8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ukadd8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ukadd8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

sub8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sub8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

rsub8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsub8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ursub8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursub8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

ksub8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksub8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

uksub8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksub8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

sra16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sra16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srai16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srai16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

sra16.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sra16.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srai16.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srai16.u: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

srl16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srl16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srli16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srli16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

srl16.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srl16.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srli16.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srli16.u: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

sll16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sll16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

slli16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      slli16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

ksll16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksll16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

kslli16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslli16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

kslra16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslra16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

kslra16.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslra16.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

sra8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sra8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srai8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srai8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

sra8.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sra8.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srai8.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srai8.u: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

srl8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srl8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srli8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srli8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

srl8.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srl8.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srli8.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srli8.u: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

sll8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sll8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

slli8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      slli8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

ksll8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksll8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

kslli8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslli8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

kslra8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslra8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

kslra8.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslra8.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", xlen, True)': 0
        'walking_zeros("rs2_val", xlen, True)': 0
        'alternate("rs2_val", xlen, True)': 0

cmpeq16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      cmpeq16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

scmplt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmplt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

scmple16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmple16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ucmplt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmplt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

ucmple16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmple16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

cmpeq8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      cmpeq8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

scmplt8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmplt8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

scmple8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmple8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ucmplt8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmplt8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

ucmple8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmple8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smul16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smul16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smulx16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smulx16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umul16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umul16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

umulx16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umulx16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

khm16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khm16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmx16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khmx16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smul8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smul8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

smulx8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smulx8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umul8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umul8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

umulx8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umulx8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

khm8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khm8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

khmx8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khmx8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

smin16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smin16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umin16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umin16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

smax16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smax16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umax16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umax16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

sclip16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sclip16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

uclip16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uclip16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

kabs16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kabs16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0

clrs16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clrs16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0

clz16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clz16: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0

# alias of pkbt16
# swap16:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       swap16: 0
#     rs1:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 16, signed=False)': 0

smin8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smin8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umin8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umin8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smax8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smax8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umax8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umax8: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

kabs8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kabs8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sclip8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sclip8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

uclip8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uclip8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

clrs8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clrs8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

clz8:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clz8: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

# instructions overlapping with those in the B extension in RV32/RV64 configuration (Zbpbo)
# swap8:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       swap8: 0
#     rs1:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 8, signed=False)': 0

sunpkd810:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sunpkd810: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd820:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sunpkd820: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd830:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sunpkd830: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd831:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sunpkd831: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd832:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sunpkd832: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

zunpkd810:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      zunpkd810: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd820:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      zunpkd820: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd830:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      zunpkd830: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd831:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      zunpkd831: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd832:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      zunpkd832: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

# instructions overlapping with those in the B extension in RV32 configuration (Zbpbo)
# pkbb16:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       pkbb16: 0
#     rs1:
#       <<: *all_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 16, signed=False)': 0
#         'simd_base_val("rs2", xlen, 16, signed=False)': 0
#         'simd_val_comb(xlen, 16, signed=False)': 0

pkbt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pkbt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

pktb16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pktb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

# instructions overlapping with those in the B extension in RV32 configuration (Zbpbo)
# pktt16:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       pktt16: 0
#     rs1:
#       <<: *all_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 16, signed=False)': 0
#         'simd_base_val("rs2", xlen, 16, signed=False)': 0
#         'simd_val_comb(xlen, 16, signed=False)': 0

# 2.3.2.
smmul:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmul: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

smmul.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmul.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kmmac:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmac: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kmmac.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmac.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kmmsb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmsb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kmmsb.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmsb.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kwmmul:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kwmmul: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

kwmmul.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kwmmul.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0


# 2.3.3 Most Significant Word 32x32 Multiply & Add Instructions

smmwb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmwb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

smmwb.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmwb.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

smmwt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmwt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

smmwt.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smmwt.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0


kmmawb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawb.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawb.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawt.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawt.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0


kmmwb2:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmwb2: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmwb2.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmwb2.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmwt2:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmwt2: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmwt2.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmwt2.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0


kmmawb2:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawb2: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawb2.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawb2.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawt2:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawt2: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

kmmawt2.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmmawt2.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

# 2.3.4

smbb16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smbb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smbt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smbt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smtt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smtt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
smds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smdrs:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smdrs: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smxds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smxds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmabb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmabb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmabt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmabt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmatt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmatt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmada:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmada: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmaxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmaxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmads:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmads: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmadrs:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmadrs: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmaxds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmaxds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmsda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmsda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmsxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmsxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

# 2.3.5
smal:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smal: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn]
      abstract_comb:
        'simd_base_val("rs2", xlen, 16, signed=True)': 0

# 2.3.6 Miscellaneous Instructions

sclip32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sclip32: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

uclip32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uclip32: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_imm_val("imm_val", 5)': 0

clrs32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      clrs32: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0

# instructions overlapping with those in the B extension in RV32 configuration (Zbpbo)
# clz32:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       clz32: 0
#     rs1:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     val_comb:
#       abstract_comb:
#         'simd_base_val("rs1", xlen, 32, signed=False)': 0

pbsad:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pbsad: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

pbsada:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      pbsada: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smaqa:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smaqa: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umaqa:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umaqa: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smaqa.su:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smaqa.su: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

# 2.4.1
add64:
    config:
      - check ISA:=regex(.*32.*I.*P.*)
    opcode:
      add64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

radd64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      radd64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

uradd64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uradd64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_unsgn, *rvp64_rs2val_unsgn, *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_unsgn, *rvp64_rs2val_walking_unsgn]

kadd64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kadd64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

ukadd64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukadd64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_unsgn, *rvp64_rs2val_unsgn, *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_unsgn, *rvp64_rs2val_walking_unsgn]

sub64:
    config:
      - check ISA:=regex(.*32.*I.*P.*)
    opcode:
      sub64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

rsub64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsub64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

ursub64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursub64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_unsgn, *rvp64_rs2val_unsgn, *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_unsgn, *rvp64_rs2val_walking_unsgn]

ksub64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksub64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_sgn, *rvp64_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_sgn, *rvp64_rs2val_walking_sgn]

uksub64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksub64: 0
    rs1:
      <<: *pair_regs
    rs2:
      <<: *pair_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*rvp64_rs1val_unsgn, *rvp64_rs2val_unsgn, *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rvp64_rs1val_walking_unsgn, *rvp64_rs2val_walking_unsgn]

# 2.4.2
smar64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smar64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

smsr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smsr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

umar64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umar64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

umsr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      umsr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kmar64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmar64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kmsr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmsr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukmar64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukmar64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

ukmsr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukmsr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

# 2.4.3
smalbb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalbb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smalbt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalbt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smaltt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smaltt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smalda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smalxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smalds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smaldrs:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smaldrs: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smalxds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smalxds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smslda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smslda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smslxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smslxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

# 2.5 Non-SIMD Instructions

kaddh:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kaddh: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ksubh:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksubh: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmbb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khmbb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmbt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khmbt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmtt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      khmtt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukaddh:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukaddh: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

uksubh:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksubh: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kaddw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kaddw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukaddw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukaddw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

ksubw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksubw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

uksubw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksubw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kdmbb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmbt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmtt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmtt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kslraw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslraw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kslraw.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslraw.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'rs1_val == rs2_val': 0
        'rs1_val != rs2_val': 0

ksllw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksllw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

kslliw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslliw: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

kdmabb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmabb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmabt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmabt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmatt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmatt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kabsw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kabsw: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0

# 2.5.3.
raddw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      raddw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

uraddw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uraddw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0

rsubw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsubw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

ursubw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursubw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0

mulr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      mulr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
mulsr64:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      mulsr64: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *pair_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

maddr32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      maddr32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

msubr32:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      msubr32: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0

# 2.5.4
# alias of csr operations 
# rdov:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       rdov: 0
#     rd:
#       <<: *all_regs
# 
# 
# clrov:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       clrov: 0
#     rd:
#       <<: *all_regs

# 2.5.5.
ave:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ave: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn, *base_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

sra.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sra.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn, *base_rs2val_sgn, *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

srai.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      srai.u: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking_len]


# instructions overlapping with those in the B extension in RV32/RV64 configuration (Zbpbo)
# bitrev:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       bitrev: 0
#     rs1:
#       <<: *all_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       <<: [*base_rs1val_sgn, *base_rs2val_sgn, *rfmt_val_comb_sgn]
#       abstract_comb:
#         <<: [*rs1val_walking, *rs2val_walking]
# 
# 
# bitrevi:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       bitrevi: 0
#     rs1:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *ifmt_op_comb
#     val_comb:
#       abstract_comb:
#         <<: [*rs1val_walking, *ifmt_immval_walking_len]

# instructions overlapping with those in the B extension in RV32/RV64 configuration (Zbpbo)
# wext:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       wext: 0
#     rs1:
#       <<: *pair_regs
#     rs2:
#       <<: *all_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *rfmt_op_comb
#     val_comb:
#       <<: [*rvp64_rs1val_sgn]
#       abstract_comb:
#         'simd_base_val("rs2", xlen, 8, signed=False)': 0
# 
# wexti:
#     config:
#       - check ISA:=regex(.*I.*P.*)
#     opcode:
#       wexti: 0
#     rs1:
#       <<: *pair_regs
#     rd:
#       <<: *all_regs
#     op_comb:
#       <<: *ifmt_op_comb
#     val_comb:
#       <<: [*rvp64_rs1val_sgn]
#       abstract_comb:
#         'simd_imm_val("imm_val", 5)': 0

insb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      insb: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn]
      abstract_comb:
        'simd_imm_val("imm_val", ceil(log(xlen,2))-3)': 0
